<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>fancy-thinking-about-DSP</title>
    <link href="/2025/10/14/fancy-thinking-about-DSP/"/>
    <url>/2025/10/14/fancy-thinking-about-DSP/</url>
    
    <content type="html"><![CDATA[<h3id="解谜周期信号的傅里叶变换从第一页的天书公式到第二页的例题实战">解谜周期信号的傅里叶变换：从第一页的”天书”公式到第二页的例题实战</h3><h4 id="引言">引言</h4><p>在学习信号与系统或数字信号处理时，当我们翻到”周期信号的傅里叶变换”这一节，常常会遭遇一场”认知风暴”。教材的第一页可能会直接抛出一个充斥着冲激函数和无穷求和的复杂公式，让人摸不着头脑。而紧接着的第二页，例题在使用这个公式时，又似乎”违背”了定义，只计算了”一个周期”的变换。</p><p><img src="../img/DSP/1.jpg" title="图片1" alt="图片1" /> <imgsrc="../img/DSP/2.jpg" title="图片2" alt="图片2" /></p><p>你是否也曾感到困惑：</p><ol type="1"><li>第一页的公式是怎么来的？为什么长得这么奇怪？</li><li>为什么例题里用了这个公式，算出来的却不是完整的变换？</li><li>那个神秘的、对所有整数 <code>k</code> 的求和到底是什么意思？</li></ol><p>本文就将沿着这条思考路径，为你彻底解开这些谜团。</p><h4 id="第一页的公式为何凭空出现不知所云">1.第一页的公式：为何”凭空出现”，不知所云？</h4><p>我们看到的第一页公式，通常是这样的：</p><p><span class="math display">\[ \widetilde{X}(e^{j\omega}) =\sum_{k=-\infty}^{\infty} \frac{2\pi}{N} \widetilde{X}[k] \delta(\omega- \frac{2\pi k}{N}) \]</span></p><p><strong>初次接触的困惑点：</strong></p><ul><li><strong>对象不明：</strong>这个公式处理的是无限长的<strong>周期</strong>信号 <spanclass="math inline">\(\tilde{x}[n]\)</span>。</li><li><strong>定义突兀：</strong>它没有像非周期信号那样从DTFT的求和式推导过来，而是直接”定义”出来的。因为它知道，对于周期信号，直接套用DTFT求和会得到无穷大，根本不收敛<ahref="@ref">1,2</a>。</li><li><strong>符号诡异：</strong> 求和是对所有整数 <code>k</code>进行的，但 <span class="math inline">\(\widetilde{X}[k]\)</span>是离散傅里叶级数（DFS）系数，它本身是周期为N的序列。一个周期序列的系数，为什么要对所有整数求和？信息不是重复的吗？</li></ul><p>这个公式更像是一个<strong>“宪法总纲”</strong>，它从最高原则上<strong>定义</strong>了周期信号的傅里叶变换应该是什么样子：<strong>即在频率轴上的一串冲激函数</strong>。但它并没有立即告诉我们这个”宪法”是如何被”立法”出来的。这正是困惑的源头。</p><h4 id="第二页的例题为何莫名变成一个周期的变换">2.第二页的例题：为何”莫名”变成一个周期的变换？</h4><p>当我们带着困惑看向例题（例如求 <spanclass="math inline">\(\cos(0.1\pi n)\)</span>的傅里叶变换）时，会发现一个更奇怪的现象。</p><p>例题的步骤通常是：</p><ol type="1"><li>求出信号的DFS系数 <spanclass="math inline">\(\widetilde{X}[k]\)</span>。</li><li>将DFS系数代入第一页的公式。</li><li>但<strong>它并没有真的对k从负无穷到正无穷求和</strong>，而是只代入了主值区间（如k=-1,1）的系数，得到了一个结果：</li></ol><p><span class="math display">\[ \widetilde{X}(e^{j\omega}) =\pi[\delta(\omega - 0.1\pi) + \delta(\omega + 0.1\pi)] \]</span></p><p>并称此为”<strong>一个周期内的傅里叶变换</strong>”。</p><p><strong>这里的矛盾感达到了顶峰：</strong>第一页的定义明明要求对全体k求和，凭什么这里只算几个k就说是”一个周期”的结果？这岂不是偷换了概念？</p><h4 id="第一页公式的推导破解双重求和的等价性谜题">3.第一页公式的推导：破解”双重求和”的等价性谜题</h4><p>要解决上述矛盾，我们必须回头补上第一页公式的”立法过程”。推导的核心思想是：<strong>将周期信号用DFS表示，然后形式地计算其傅里叶变换<ahref="@ref">1,2</a>。</strong></p><p><strong>步骤详解：</strong></p><ol type="1"><li><p><strong>起点：</strong> 周期信号 <spanclass="math inline">\(\tilde{x}[n]\)</span> 可以用其DFS系数精确重建：<span class="math display">\[ \tilde{x}[n] = \frac{1}{N} \sum_{k=\langleN \rangle} \widetilde{X}[k] e^{j \frac{2\pi}{N} k n} \]</span> 这里的<span class="math inline">\(\sum_{k=\langle N \rangle}\)</span>表示在任意一个长度为N的区间内求和，例如k=0到N-1。<strong>这是准确且有限的求和。</strong></p></li><li><p><strong>代入与变换：</strong>我们将上述表达式代入（广义）傅里叶变换的框架。我们知道，一个复指数序列<span class="math inline">\(e^{j\omega_0 n}\)</span> 的傅里叶变换是<span class="math inline">\(2\pi \sum_{l=-\infty}^{\infty} \delta(\omega- \omega_0 - 2\pi l)\)</span>。因此，对于DFS和式中的每一项 <spanclass="math inline">\(\frac{1}{N}\widetilde{X}[k] e^{j \frac{2\pi}{N} kn}\)</span>，其傅里叶变换是 <spanclass="math inline">\(\frac{2\pi}{N}\widetilde{X}[k]\sum_{l=-\infty}^{\infty} \delta(\omega - \frac{2\pi k}{N} - 2\pil)\)</span>。</p></li><li><p><strong>得到初始形式：</strong>根据线性性，整个周期信号的傅里叶变换为： <span class="math display">\[\widetilde{X}(e^{j\omega}) = \sum_{k=\langle N \rangle} \frac{2\pi}{N}\widetilde{X}[k] \sum_{l=-\infty}^{\infty} \delta(\omega - \frac{2\pik}{N} - 2\pi l) \]</span>这个公式已经是正确的，但它是一个<strong>双重求和</strong>。</p></li><li><p><strong>最关键的一步：重新索引（indexing）</strong>现在，我们进行一个巧妙的变量代换，来理解为什么双重求和可以简化为单重求和。</p><ul><li>令 <span class="math inline">\(m = k + lN\)</span>，其中 <spanclass="math inline">\(m\)</span> 是任意整数。</li><li>对于任意一个 <spanclass="math inline">\(m\)</span>，都存在唯一的一组 <spanclass="math inline">\(k\)</span> (在0到N-1之间) 和整数 <spanclass="math inline">\(l\)</span>，使得 <span class="math inline">\(m = k+ lN\)</span>。</li><li>由于 <span class="math inline">\(\widetilde{X}[k]\)</span>的周期性，<span class="math inline">\(\widetilde{X}[m] =\widetilde{X}[k]\)</span>。</li><li>再看冲激函数的参数：<span class="math inline">\(\omega - \frac{2\pim}{N} = \omega - \frac{2\pi (k + lN)}{N} = \omega - (\frac{2\pi k}{N} +2\pi l)\)</span>。</li><li>因此，<strong>双重求和</strong> <spanclass="math inline">\(\sum_{k=\langle N \rangle}\sum_{l=-\infty}^{\infty} \delta(\omega - \frac{2\pi k}{N} - 2\pil)\)</span> <strong>实际上等价于遍历了所有整数</strong> <spanclass="math inline">\(m\)</span> <strong>的单重求和</strong> <spanclass="math inline">\(\sum_{m=-\infty}^{\infty} \delta(\omega -\frac{2\pi m}{N})\)</span>！</li></ul><p>于是，公式被简化为： <span class="math display">\[\widetilde{X}(e^{j\omega}) = \sum_{m=-\infty}^{\infty} \frac{2\pi}{N}\widetilde{X}[m] \delta(\omega - \frac{2\pi m}{N}) \]</span> 将索引<span class="math inline">\(m\)</span> 换回 <spanclass="math inline">\(k\)</span>，就得到了第一页那个”天书”公式。</p></li></ol><p><strong>至此，谜题一解开：</strong>第一页的公式并非凭空出现，它是通过严谨的数学推导，将DFS表示代入傅里叶变换定义后，经过重新索引化简得到的最终形式。那个对全体<span class="math inline">\(k\)</span>的求和，其<strong>物理意义是遍历频率轴上所有（无限多个）等间隔的频率点</strong>。</p><h4 id="第二页例题的合理性为何能只算一个周期">4.第二页例题的合理性：为何能只算”一个周期”？</h4><p>在理解了第一页公式的由来后，第二页例题的做法就变得非常自然和合理了<ahref="@ref">3</a>。</p><ul><li><p><strong>频谱的周期性：</strong> 离散时间傅里叶变换 <spanclass="math inline">\(X(e^{j\omega})\)</span> 本身就是一个以 <spanclass="math inline">\(2\pi\)</span>为周期的周期函数。所以，要描述它，我们只需要写出它在一个周期（通常是<span class="math inline">\([-\pi, \pi)\)</span> 或 <spanclass="math inline">\([0,2\pi)\)</span>）内的样子就够了，这称为<strong>主值区间</strong>。</p></li><li><p><strong>例题的聪明之处：</strong>例题知道，对于周期信号，其频谱是离散的冲激。在频率主值区间 <spanclass="math inline">\([-\pi, \pi)\)</span>内，只会出现有限个冲激。例题通过计算DFS系数发现，只有在 <spanclass="math inline">\(k=1\)</span> 和 <spanclass="math inline">\(k=-1\)</span> (对应 <spanclass="math inline">\(k=19\)</span>) 时，系数不为零。这两个 <spanclass="math inline">\(k\)</span> 值对应的频率点 <spanclass="math inline">\(\omega = \pm 0.1\pi\)</span> 正好落在主值区间<span class="math inline">\([-\pi, \pi)\)</span> 内。</p></li><li><p>因此，例题的 <span class="math display">\[ \pi[\delta(\omega -0.1\pi) + \delta(\omega + 0.1\pi)] \]</span>正是整个傅里叶变换在<strong>主值区间内的表达式</strong>。而最后一步加上对<span class="math inline">\(k\)</span> 的求和 <spanclass="math inline">\(\sum_{k=-\infty}^{+\infty}\)</span>，只是将这个主值区间内的频谱模式进行周期延拓，从而得到在整个频率轴上都成立的<strong>完整表达式</strong>。这两者在数学上是完全等价的。</p></li></ul><h4 id="结论">结论</h4><p>第一页的公式是”宪法”，定义了周期信号傅里叶变换的完整形式。第二页的例题是”司法解释”，展示了如何高效地运用这部”宪法”：先找到主值区间内的有效信息（一个周期内的变换），再利用周期性宣告其在整个定义域内生效。</p><p>希望这篇”破案”笔记，能帮助你彻底理解周期信号傅里叶变换的来龙去脉，让那两页纸的内容不再神秘。</p>]]></content>
    
    
    
    <tags>
      
      <tag>DSP</tag>
      
      <tag>傅里叶变换</tag>
      
      <tag>信号处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Interview questions preparation(1)</title>
    <link href="/2025/09/24/Interview-questions-preparation/"/>
    <url>/2025/09/24/Interview-questions-preparation/</url>
    
    <content type="html"><![CDATA[<p>一些面试的问题，问题来源多种多样，一些问题的回答采用了AI的回复，后期可能重新组织文章结构</p><h1id="unordered_map和dict的底层实现是什么">unordered_map和dict的底层实现是什么</h1><p>unordered_map（C++）和dict（Python）都是编程中常用的关联数组（或叫字典、映射）实现，它们底层都基于哈希表（HashTable），但在具体实现细节上有所不同。下面我将用一个表格对比它们的核心特征，然后详细解释它们的底层实现。</p><table><thead><tr><th style="text-align: left;">特性</th><th style="text-align: left;">C++ <code>unordered_map</code></th><th style="text-align: left;">Python <code>dict</code></th></tr></thead><tbody><tr><td style="text-align: left;"><strong>底层结构</strong></td><td style="text-align: left;">哈希表 (Hash Table)</td><td style="text-align: left;">哈希表 (Hash Table)</td></tr><tr><td style="text-align: left;"><strong>冲突解决</strong></td><td style="text-align: left;"><strong>开链法</strong> (SeparateChaining)，桶内超限可能转红黑树</td><td style="text-align: left;"><strong>开放寻址法</strong> (OpenAddressing)，伪随机探测</td></tr><tr><td style="text-align: left;"><strong>哈希函数</strong></td><td style="text-align: left;">使用 <code>std::hash</code>或自定义函数对象</td><td style="text-align: left;">使用内置 <code>hash()</code> 函数</td></tr><tr><td style="text-align: left;"><strong>内存管理与扩容</strong></td><tdstyle="text-align: left;">需手动设置或依赖默认的桶数和最大负载因子</td><td style="text-align: left;">自动扩容，无需手动干预</td></tr><tr><td style="text-align: left;"><strong>键的可哈希要求</strong></td><td style="text-align: left;">键类型需支持哈希计算和 <code>==</code>比较</td><tdstyle="text-align: left;">键必须是<strong>不可变</strong>且可哈希的类型</td></tr><tr><td style="text-align: left;"><strong>有序性</strong></td><td style="text-align: left;"><strong>无序</strong></td><td style="text-align: left;">自 <strong>Python 3.7</strong>起<strong>保持插入顺序</strong></td></tr></tbody></table><h3 id="底层实现原理">🔍 底层实现原理</h3><h4 id="c-unordered_map">C++ <code>unordered_map</code></h4><p><code>unordered_map</code>的底层是一个动态数组，数组的每个元素是一个“桶”（bucket），桶背后连接着一个链表（或小型容器）。当你插入一个键值对时：1. <strong>计算哈希值</strong>：首先对键（key）应用哈希函数（默认是<code>std::hash</code> 的特化版本），得到一个哈希值（一个大的整数）。 2.<strong>确定桶索引</strong>：将这个哈希值对当前桶数组的大小（<code>bucket_count</code>）取模，从而确定该键值对应放入哪个桶中。3.<strong>处理冲突</strong>：如果多个键映射到同一个桶（哈希冲突），<code>unordered_map</code>采用<strong>开链法</strong>（SeparateChaining），将这些发生冲突的键值以链表形式存储在同一个桶内。在某些实现（如某些标准库）中，当单个桶内的元素数量超过一定阈值（例如8个），为了提升查询效率，可能会将链表转换为红黑树。4.<strong>动态扩容（Rehashing）</strong>：哈希表有一个<strong>负载因子</strong>（loadfactor），即<code>元素数量 / 桶的数量</code>。当负载因子超过预设的最大值（默认通常是<code>1.0</code>）时，为了保持操作的高效性，容器会自动进行扩容。这会创建一个新的、更大的桶数组，并将所有已有的键值对<strong>重新哈希</strong>（rehash）到新的桶数组中。扩容是一个相对耗时的操作。</p><h4 id="python-dict">Python <code>dict</code></h4><p>Python 的 <code>dict</code> 同样基于哈希表，但具体实现细节有所不同：1. <strong>计算哈希值</strong>：对键使用内置的 <code>hash()</code>函数得到哈希值。 2.<strong>确定索引</strong>：利用哈希值的某些位计算出一个索引值（在CPython 实现中，这个过程会考虑当前哈希表的大小）。 3.<strong>处理冲突</strong>：Python使用的是<strong>开放寻址法</strong>（OpenAddressing）中的<strong>伪随机探测</strong>（pseudo-randomprobing）。当发生冲突时，它会根据一个特定的探测序列（pseudo-random probesequence）在数组中寻找下一个可用的空位，而不是像开链法那样使用链表。 4.<strong>动态扩容</strong>：Python字典会自动扩容。当哈希表的拥挤程度（大致可理解为剩余空间比例）低于某个阈值时，解释器会分配一个更大的内存空间，并重新插入所有键值对。</p><h3 id="注意事项与特点">⚠️ 注意事项与特点</h3><ul><li><strong>键的类型</strong>：无论是 <code>unordered_map</code> 还是<code>dict</code>，<strong>键必须是可哈希的</strong>。在 C++中，这意味着自定义类型需要提供哈希函数和等值比较函数。在 Python中，键必须是<strong>不可变类型</strong>（如整数、浮点数、字符串、元组等），因为可变对象（如列表、字典、集合）的哈希值可能会变，这会破坏哈希表的完整性。</li><li><strong>性能</strong>：在平均情况下，两者插入、删除、查找操作的时间复杂度都是<strong>O(1)</strong>。但在最坏情况下（例如所有键都发生哈希冲突），性能会下降。<ul><li>对于 <code>unordered_map</code>，最坏情况复杂度可能达到O(n)，如果许多键都哈希到同一个桶，导致链表很长（或者树变得复杂）。</li><li>对于<code>dict</code>，在极端冲突下，开放寻址法的查找时间也会增加。</li></ul></li><li><strong>内存使用</strong>：<code>unordered_map</code>的开链法每个元素会有额外的指针开销（指向链表下一个节点或树结构）。<code>dict</code>的开放寻址法通常更节省内存，并且由于其数据存储在连续数组中，<strong>缓存局部性（CacheLocality）更好</strong>，这在许多情况下能带来实际的速度提升。</li><li><strong>顺序</strong>：C++<code>unordered_map</code><strong>不保证</strong>任何特定的遍历顺序，并且顺序可能会随着扩容重新哈希而改变。Python的 <code>dict</code> 自 3.7版本起<strong>官方保证</strong>遍历顺序即为元素的插入顺序。</li></ul><h3 id="如何选择和使用">💡 如何选择和使用</h3><ul><li><strong>C++</strong>：当需要<strong>快速的键值查找且不关心顺序</strong>时，优先选择<code>unordered_map</code> 而不是<code>map</code>（基于红黑树，有序，操作复杂度为 O(logn)）。如果需要<strong>有序遍历</strong>，则使用 <code>map</code>。</li><li><strong>Python</strong>：直接使用 <code>dict</code>即可。它的实现在大多数情况下都非常高效，并且保持了插入顺序，非常实用。</li></ul><p>希望这些解释能帮助你更深入地理解 <code>unordered_map</code> 和<code>dict</code>。如果你有其他问题，欢迎继续提出。</p><hr /><h1id="pandas和numpy的底层和一些函数的底层实现">pandas和numpy的底层和一些函数的底层实现</h1><p>Pandas 和 NumPy 是 Python数据科学的核心，虽然常协同工作，但设计目标和底层实现各有侧重。下面这张表格汇总了它们的核心差异，帮你快速把握全貌。</p><table><thead><tr><th style="text-align: left;">特性维度</th><th style="text-align: left;">NumPy</th><th style="text-align: left;">Pandas</th></tr></thead><tbody><tr><td style="text-align: left;"><strong>核心数据结构</strong></td><td style="text-align: left;"><code>ndarray</code> (N维数组)</td><td style="text-align: left;"><code>Series</code>,<code>DataFrame</code> (带标签的表格结构)</td></tr><tr><td style="text-align: left;"><strong>设计目标</strong></td><td style="text-align: left;"><strong>高效的数值计算</strong></td><td style="text-align: left;"><strong>灵活的数据处理与分析</strong></td></tr><tr><td style="text-align: left;"><strong>数据同质性</strong></td><tdstyle="text-align: left;"><strong>同质</strong>：数组内元素类型必须一致</td><td style="text-align: left;"><strong>异构</strong>：DataFrame的不同列可以是不同类型</td></tr><tr><td style="text-align: left;"><strong>索引机制</strong></td><td style="text-align: left;">主要为整数索引</td><tdstyle="text-align: left;">支持灵活的标签索引、多层索引和布尔索引</td></tr><tr><td style="text-align: left;"><strong>缺失值处理</strong></td><td style="text-align: left;">较基础</td><td style="text-align: left;"><strong>原生支持</strong><code>NaN</code>，并提供丰富的处理方法</td></tr><tr><td style="text-align: left;"><strong>内存布局</strong></td><td style="text-align: left;"><strong>单一连续内存块</strong></td><tdstyle="text-align: left;">列存储（每列一个独立数组），附加索引结构</td></tr><tr><td style="text-align: left;"><strong>性能侧重</strong></td><tdstyle="text-align: left;">大规模数值运算（如矩阵乘法、傅里叶变换）</td><td style="text-align: left;">数据清洗、转换、聚合、关系型操作</td></tr><tr><td style="text-align: left;"><strong>底层语言</strong></td><td style="text-align: left;">大量 C/C++ 和 Cython 实现</td><td style="text-align: left;">构建于 NumPy 之上，大量使用 C/C++ 和Cython 实现</td></tr></tbody></table><p>🧠 接下来，我们深入看看它们的一些核心底层机制。</p><h3 id="numpy-的底层实现">🔧 NumPy 的底层实现</h3><p>NumPy 的核心是 <code>ndarray</code>（N-dimensionalarray），它包含以下关键属性[citation：7]： * <strong>数据缓冲区（DataBuffer）</strong>：一个<strong>连续的内存块</strong>，存储所有数组元素。这种连续的内存布局是现代CPU 高效访问数据的基石。 *<strong>形状（Shape）</strong>：描述数组维度的元组。 *<strong>数据类型（Dtype）</strong>：指定数组中元素的数据类型（如<code>int64</code>, <code>float32</code>），确保了数据的同质性。 *<strong>步幅（Strides）</strong>：一个元组，表示遍历数组每个维度时需要在内存中步进的字节数。这使得数组可以以不同视角查看数据而无需复制。</p><p>NumPy 的高性能很大程度上源于<strong>向量化操作</strong>。这些操作通过<strong>通用函数（ufuncs）</strong> 实现，其底层是 C/C++ 代码，避免了Python 循环的开销，并充分利用了现代 CPU 的SIMD（单指令多数据流）指令集进行并行计算。</p><p><strong>广播机制（Broadcasting）</strong> 是 NumPy的另一个核心特性。它允许不同形状的数组进行算术运算。其规则是：从维度最右边开始对齐，维度相等或其中一方为1 时即可广播。NumPy会自动将较小的数组“拉伸”以匹配较大数组的形状，从而无需显式复制数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 向量化操作示例：整个数组相加</span><br>a = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>b = np.array([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<br>c = a + b  <span class="hljs-comment"># 在C层执行高效循环，而非Python层</span><br><br><span class="hljs-comment"># 广播机制示例：标量与数组相乘</span><br>arr = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])<br>result = arr * <span class="hljs-number">2</span>  <span class="hljs-comment"># 标量值2被广播到与arr相同的形状</span><br></code></pre></td></tr></table></figure><h3 id="pandas-的底层实现">🗃️ Pandas 的底层实现</h3><p>Pandas 的 <code>Series</code> 和 <code>DataFrame</code> 构建于 NumPy之上。<code>Series</code> 可看作一个带索引的一维 NumPy 数组，而<code>DataFrame</code> 是一个由多个<code>Series</code>（列）组成的二维表格，这些列<strong>共享相同的索引</strong>。</p><p>Pandas 采用<strong>列式存储</strong>。每个 <code>DataFrame</code>的每一列都是一个独立的内存连续的 NumPy数组（或类似结构）。这种布局对于按列进行的聚合和计算非常高效，但按行操作可能较慢。</p><p>Pandas 的<strong>索引引擎</strong>是其高效数据查询的关键。索引（如<code>RangeIndex</code>, <code>Int64Index</code>,<code>CategoricalIndex</code>,<code>DatetimeIndex</code>）一旦创建通常是不可变的，类似于字典的键。它使用<strong>哈希表</strong>（对于无序索引）或<strong>二分查找</strong>（对于有序索引）来快速映射标签到数据位置，使得基于标签的查询（如<code>df.loc[label]</code>）非常高效。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-comment"># 创建一个简单的DataFrame</span><br>df = pd.DataFrame(&#123;<br>    <span class="hljs-string">&#x27;age&#x27;</span>: [<span class="hljs-number">25</span>, <span class="hljs-number">30</span>, <span class="hljs-number">35</span>],<br>    <span class="hljs-string">&#x27;salary&#x27;</span>: [<span class="hljs-number">50000</span>, <span class="hljs-number">60000</span>, <span class="hljs-number">70000</span>]<br>&#125;, index=[<span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;Charlie&#x27;</span>])<br><br><span class="hljs-comment"># .loc[] 使用索引引擎进行快速标签查找</span><br>alice_salary = df.loc[<span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-string">&#x27;salary&#x27;</span>]<br></code></pre></td></tr></table></figure><p>Pandas 2.0 引入了对 <strong>Apache Arrow</strong>的支持作为另一种后端。Arrow提供了更高效的内存布局和跨语言能力，尤其在处理字符串和非数值数据时能提升性能并减少内存占用。</p><h3 id="核心函数的底层实现">⚙️ 核心函数的底层实现</h3><p>许多高性能操作的背后是精心优化的底层代码。</p><ul><li><strong>NumPy 的 <code>np.dot()</code>(矩阵乘法)</strong>：通常会调用底层高度优化的 <strong>BLAS</strong>(Basic Linear Algebra Subprograms) 库（如 OpenBLAS, IntelMKL）的实现。这些库针对特定 CPU 架构进行了极致优化。</li><li><strong>Pandas 的<code>groupby().mean()</code></strong>：虽然表面是单行代码，底层可能涉及：<ol type="1"><li>根据键对行进行哈希或排序，形成分组。</li><li>对每个分组的数值列调用相应的 NumPy 聚合函数（如<code>np.mean</code>）。</li><li>将结果组装成新的 <code>DataFrame</code>。 整个流程在 Cython/C层实现，避免了 Python 循环。</li></ol></li></ul><h3 id="高效协作之道">🤝 高效协作之道</h3><p>NumPy 和 Pandas 协同工作，形成了高效的数据处理流程：</p><ol type="1"><li><strong>使用 Pandas 进行数据导入和清洗</strong>：利用其强大的 IO工具（如<code>read_csv</code>）和数据处理功能（处理缺失值、字符串操作、时间序列解析等）。</li><li><strong>转换为 NumPy数组进行核心数值计算</strong>：在需要执行复杂数学运算、机器学习模型训练时，通过<code>.values</code> 或 <code>.to_numpy()</code> 将 Pandas 数据转换为NumPy 数组，以发挥其数值计算极限性能。</li><li><strong>(可选) 结果转回 Pandas进行展示或输出</strong>：将计算结果重新包装回<code>DataFrame</code>，便于后续的标签化操作、可视化或导出。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 典型工作流：Pandas 用于数据准备，NumPy 用于计算</span><br>df = pd.read_csv(<span class="hljs-string">&#x27;data.csv&#x27;</span>)  <span class="hljs-comment"># Pandas 读取数据</span><br>df_cleaned = df.dropna()  <span class="hljs-comment"># Pandas 清洗数据</span><br><br><span class="hljs-comment"># 提取数值列转换为 NumPy 数组进行高强度计算</span><br>matrix = df_cleaned[[<span class="hljs-string">&#x27;feature1&#x27;</span>, <span class="hljs-string">&#x27;feature2&#x27;</span>]].to_numpy()<br><span class="hljs-comment"># 使用 NumPy 进行奇异值分解 (SVD)</span><br>u, s, vh = np.linalg.svd(matrix)<br><br><span class="hljs-comment"># 将结果转回 Pandas 进行展示</span><br>result_df = pd.DataFrame(u, index=df_cleaned.index)<br><span class="hljs-built_in">print</span>(result_df.head())<br></code></pre></td></tr></table></figure><h3 id="性能优化技巧">💡 性能优化技巧</h3><ul><li><strong>优先使用向量化操作</strong>：无论在 NumPy 还是 Pandas中，都应尽量避免显式的 Python 循环，充分利用其内置的、基于 C的向量化方法。</li><li><strong>关注数据类型</strong>：在 Pandas中，使用合适的数据类型能显著减少内存占用并提升速度。例如：<ul><li>用 <code>pd.to_numeric(..., downcast='integer')</code>向下转换整数类型。</li><li>对低基数（重复值多）的字符串列使用<code>astype('category')</code>。</li><li>使用 <code>pd.to_datetime</code> 转换日期时间。</li></ul></li><li><strong>警惕复制操作</strong>：理解 NumPy的视图（view）与副本（copy）以及 Pandas 的 <code>copy=False</code>等选项，避免不必要的内存复制。</li></ul><p>理解 Pandas 和 NumPy的底层机制，能帮助你在数据处理任务中选择正确的工具和方法，从而编写出更高效、更优雅的代码。</p><hr /><h1id="fork和spawn分别是什么以及对应的内存">fork()和spawn()分别是什么，以及对应的内存</h1><p>理解 <code>fork()</code> 和 <code>spawn()</code>这两种创建子进程的方式及其内存管理机制，对于编写高效、稳定的程序很重要。下面我将为你解释它们的特点、内存处理方式以及如何选择。</p><h3 id="核心特性对比">📊 核心特性对比</h3><table><thead><tr><th style="text-align: left;">特性维度</th><th style="text-align: left;">fork()</th><th style="text-align: left;">spawn() (或 posix_spawn())</th></tr></thead><tbody><tr><td style="text-align: left;"><strong>创建机制</strong></td><td style="text-align: left;">复制父进程状态</td><td style="text-align: left;">启动新程序</td></tr><tr><td style="text-align: left;"><strong>内存管理</strong></td><td style="text-align: left;"><strong>写时复制(Copy-On-Write)</strong></td><td style="text-align: left;">全新加载</td></tr><tr><td style="text-align: left;"><strong>执行速度</strong></td><td style="text-align: left;">快（内存延迟复制）</td><td style="text-align: left;">慢（需加载新程序）</td></tr><tr><td style="text-align: left;"><strong>资源继承</strong></td><tdstyle="text-align: left;">继承父进程大部分资源（文件描述符、内存状态等）</td><td style="text-align: left;">不继承父进程资源（或仅继承必要部分）</td></tr><tr><td style="text-align: left;"><strong>安全性</strong></td><tdstyle="text-align: left;">相对较低（继承父进程状态可能带来风险）</td><td style="text-align: left;">较高（进程独立，起点干净）</td></tr><tr><td style="text-align: left;"><strong>平台支持</strong></td><td style="text-align: left;">主要类 Unix 系统（Linux, macOS）</td><td style="text-align: left;">跨平台（包括 Windows）</td></tr><tr><td style="text-align: left;"><strong>适用场景</strong></td><td style="text-align: left;">需要快速创建类似父进程的子进程</td><td style="text-align: left;">需要启动全新程序或注重安全隔离的场景</td></tr></tbody></table><h3 id="工作机制与内存管理">🧠 工作机制与内存管理</h3><h4 id="fork">1. fork()</h4><p><code>fork()</code> 是类 Unix 系统中创建新进程的传统方式。 *<strong>工作原理</strong>：<code>fork()</code>通过<strong>复制父进程的地址空间</strong>来创建子进程。子进程几乎是父进程的完整副本，包括代码段、数据段、堆栈段和打开的文件描述符等。子进程会获得一个新的进程ID（PID），并与父进程独立运行。 * <strong>写时复制 (Copy-On-Write,COW)</strong>：现代操作系统（如Linux）使用<strong>写时复制</strong>技术来优化 <code>fork()</code>的性能和减少内存开销。这意味着： * 在 <code>fork()</code>之后，<strong>父子进程最初共享相同的物理内存页</strong>。 *只有当<strong>父进程或子进程试图修改某块内存数据</strong>时，操作系统才会<strong>为该进程分配新的物理内存页并复制原始数据</strong>，然后才执行修改。* 这种机制避免了不必要的内存复制，大大提高了 <code>fork()</code>的效率，尤其是在子进程立即调用 <code>exec()</code>执行新程序的情况下（因为可能很多内存页根本不会被修改）。</p><h4 id="spawn-或-posix_spawn">2. spawn() (或 posix_spawn())</h4><p><code>spawn()</code> 是一组函数（如<code>posix_spawn()</code>），它提供了另一种启动新进程的方式，通常更加灵活。* <strong>工作原理</strong>：<code>spawn()</code><strong>不复制父进程的地址空间</strong>，而是直接<strong>加载并执行一个新的程序</strong>。新进程从程序的入口点（如<code>main</code> 函数）开始执行，拥有全新的内存空间。 *<strong>内存管理</strong>：由于是全新加载，<strong>子进程不继承父进程的数据段、堆或栈</strong>。它只有程序本身和任何显式传递的环境变量、参数所定义的内存状态。这自然形成了进程间的隔离。</p><h3 id="特点与使用场景">⚙️ 特点与使用场景</h3><ul><li><strong>fork() 的特点与场景</strong>：<ul><li><strong>特点</strong>：启动速度快（得益于COW）；子进程继承父进程状态（包括文件描述符，这有时很方便，但也可能导致意外共享资源）；在父进程多线程情况下fork 可能导致某些状态不一致。</li><li><strong>典型场景</strong>：<ul><li>创建子进程并执行<strong>与父进程类似的任务</strong>。</li><li>配合 <code>exec()</code> 系列函数使用：先 <code>fork()</code>出子进程，然后在子进程中立即调用 <code>exec()</code>来执行另一个程序。这是一种常见模式，COW 机制在此模式下效率很高。</li><li><strong>网络服务</strong>中，为每个新连接创建一个新的子进程来处理（例如传统的CGI 模式）。</li></ul></li></ul></li><li><strong>spawn() 的特点与场景</strong>：<ul><li><strong>特点</strong>：启动速度相对较慢（需要加载新程序）；子进程环境干净，与父进程隔离性好；<strong>跨平台支持更好</strong>（Windows也支持类似的机制，虽然 Windows 没有原生的 <code>fork()</code>）。</li><li><strong>典型场景</strong>：<ul><li>需要<strong>启动一个完全不同的程序</strong>。</li><li>注重<strong>安全性和隔离性</strong>，不希望子进程继承父进程的任何状态。</li><li>在<strong>跨平台应用程序</strong>中创建新进程。</li><li>在涉及 <strong>GPU 加速</strong> 或操作<strong>外部硬件资源</strong>时，使用 <code>spawn</code> 可以避免子进程继承父进程的硬件上下文（如CUDA 上下文），从而防止潜在的错误和资源冲突。</li></ul></li></ul></li></ul><h3 id="代码示例">🧪 代码示例</h3><h4 id="c-语言中的-fork">C 语言中的 fork()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">pid_t</span> pid = fork(); <span class="hljs-comment">// 创建子进程</span><br><br>    <span class="hljs-keyword">if</span> (pid &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Fork failed\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 子进程</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Child process: My PID is %d\n&quot;</span>, getpid());<br>        <span class="hljs-comment">// 子进程可以在这里执行任务或调用 exec</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 父进程</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Parent process: My PID is %d, Child&#x27;s PID is %d\n&quot;</span>, getpid(), pid);<br>        wait(<span class="hljs-literal">NULL</span>); <span class="hljs-comment">// 等待子进程结束</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="python-multiprocessing-中设置-spawn">Python multiprocessing中设置 spawn</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> multiprocessing <span class="hljs-keyword">as</span> mp<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">worker</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Worker process executing&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 设置使用 spawn 方式创建进程</span><br>    mp.set_start_method(<span class="hljs-string">&#x27;spawn&#x27;</span>) <span class="hljs-comment"># 在 Windows 和 macOS 上 spawn 是默认方式</span><br>    p = mp.Process(target=worker)<br>    p.start()<br>    p.join()<br></code></pre></td></tr></table></figure><h3 id="如何选择-fork-和-spawn">💡 如何选择 fork() 和 spawn()</h3><ol type="1"><li><strong>优先考虑spawn</strong>：尤其是在编写<strong>新代码</strong>或需要<strong>跨平台</strong>时，或者当程序涉及<strong>多线程</strong>、<strong>硬件资源（如GPU）</strong> 时，使用 <code>spawn</code>通常更安全，能避免许多因继承状态而导致的潜在问题。</li><li><strong>谨慎使用 fork()</strong>：在<strong>类 Unix系统</strong>上，如果<strong>非常注重创建进程的速度</strong>，且能<strong>确保fork后父进程状态是安全的</strong>（例如，没有其他线程在运行，或能妥善处理继承的资源），并且之后很可能调用<code>exec()</code>，那么 <code>fork()</code> 是一个高效的选择。</li><li><strong>注意平台差异</strong>：Windows系统<strong>不支持</strong>原生的 <code>fork()</code>。在 Python等跨语言环境中，Windows 上 <code>multiprocessing</code>的默认启动方式就是 <code>spawn</code>。</li></ol><h3 id="总结">💎 总结</h3><p><code>fork()</code> 和 <code>spawn()</code>是两种不同的进程创建哲学： * <code>fork()</code>类似于“分身”，<strong>继承</strong>父进程的衣钵，通过<strong>写时复制</strong>优化内存，在符合其使用场景时非常高效。* <code>spawn()</code>类似于“新生”，<strong>强调隔离与安全</strong>，从头开始加载程序，牺牲一些速度换来更好的稳定性和跨平台支持。</p><p>选择哪一种，取决于你的具体需求：是追求极致的创建速度（并在能控制风险的前提下），还是更看重进程的独立性和代码的健壮性。</p><p>希望这些信息能帮助你更好地理解 fork() 和spawn()。如果你还有其他问题，欢迎提出。</p><hr /><h1 id="协程是什么">协程是什么</h1><p>协程（Coroutine）是一种比线程更加轻量级的并发编程组件，它允许在<strong>单线程</strong>内通过<strong>协作式调度</strong>实现多任务的交替执行。它的核心特点是<strong>由程序自身控制任务的挂起与恢复</strong>，而非由操作系统内核进行抢占式调度。</p><p>为了让你快速把握协程与其他并发概念的区别，我准备了一个对比表格：</p><table><thead><tr><th style="text-align: left;">特性维度</th><th style="text-align: left;">进程</th><th style="text-align: left;">线程</th><th style="text-align: left;">协程</th></tr></thead><tbody><tr><td style="text-align: left;"><strong>调度主体</strong></td><td style="text-align: left;"><strong>操作系统</strong></td><td style="text-align: left;"><strong>操作系统</strong></td><td style="text-align: left;"><strong>用户程序</strong>（协作式）</td></tr><tr><td style="text-align: left;"><strong>资源开销</strong></td><td style="text-align: left;">大（独立内存空间）</td><td style="text-align: left;">中等（共享进程内存）</td><tdstyle="text-align: left;"><strong>极小</strong>（主要是寄存器上下文和栈）</td></tr><tr><td style="text-align: left;"><strong>切换开销</strong></td><td style="text-align: left;">高（需要切换内存空间等）</td><td style="text-align: left;">中（需要内核介入）</td><tdstyle="text-align: left;"><strong>极低</strong>（无内核切换，用户态完成）</td></tr><tr><td style="text-align: left;"><strong>隔离性</strong></td><td style="text-align: left;"><strong>强</strong>（地址空间独立）</td><td style="text-align: left;"><strong>弱</strong>（共享进程内存）</td><td style="text-align: left;"><strong>弱</strong>（共享线程内存）</td></tr><tr><td style="text-align: left;"><strong>并发性</strong></td><td style="text-align: left;">进程间并发</td><td style="text-align: left;">线程间并发</td><td style="text-align: left;">协程间并发（单线程内）</td></tr><tr><td style="text-align: left;"><strong>数据共享</strong></td><td style="text-align: left;">复杂（需要IPC机制）</td><td style="text-align: left;">简单（共享进程内存）</td><td style="text-align: left;">简单（共享线程内存）</td></tr><tr><td style="text-align: left;"><strong>抢占机制</strong></td><td style="text-align: left;">抢占式</td><td style="text-align: left;">抢占式</td><td style="text-align: left;"><strong>非抢占式</strong>（主动让出）</td></tr><tr><td style="text-align: left;"><strong>适用场景</strong></td><td style="text-align: left;">计算密集型、需要强隔离</td><td style="text-align: left;">通用型、IO密集型</td><td style="text-align: left;"><strong>高并发IO密集型</strong></td></tr></tbody></table><p>🧠 <strong>协程的核心工作原理</strong></p><p>你可以把协程理解为一个可以<strong>多次进入、多次返回</strong>的函数。它通过<code>yield</code> 或 <code>async/await</code>这样的关键字，在代码中定义<strong>挂起点</strong>（SuspensionPoints）。执行到这些点时，它会主动暂停，保存当前的执行状态（包括局部变量、程序计数器等上下文），并将控制权交还给调度器，而不是被操作系统强制中断。调度器随后可以恢复另一个协程的执行。</p><p>这种“<strong>主动让出</strong>”的协作机制，避免了陷入内核态进行线程上下文切换的巨大开销，使得<strong>大量协程</strong>在单线程内并发运行成为可能。</p><p>🛠️ <strong>实现方式与语法（以Python为例）</strong></p><p>不同语言对协程的实现支持不同。在Python中，其演进过程是： 1.<strong>生成器时代</strong>：早期通过 <code>yield</code>关键字模拟协程，需手动调用 <code>.send()</code> 方法传递数据和控制流。2. <strong>原生协程</strong>（Python 3.5+）：引入了 <code>async</code>和 <code>await</code>关键字，使协程成为语言的一等公民，代码更清晰直观。</p><p>一个简单的 Python 协程示例： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_data</span>(<span class="hljs-params">url</span>):  <span class="hljs-comment"># 使用 async def 定义一个协程函数</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Fetching <span class="hljs-subst">&#123;url&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 使用 await 挂起协程，模拟IO操作</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Data from <span class="hljs-subst">&#123;url&#125;</span>&quot;</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 创建多个协程任务</span><br>    task1 = fetch_data(<span class="hljs-string">&quot;https://api.example.com/data1&quot;</span>)<br>    task2 = fetch_data(<span class="hljs-string">&quot;https://api.example.com/data2&quot;</span>)<br>    <br>    <span class="hljs-comment"># 并发执行这两个任务</span><br>    results = <span class="hljs-keyword">await</span> asyncio.gather(task1, task2)<br>    <span class="hljs-built_in">print</span>(results)<br><br><span class="hljs-comment"># 运行主协程</span><br>asyncio.run(main())<br></code></pre></td></tr></table></figure></p><p>⚡ <strong>协程的优缺点</strong></p><ul><li><strong>优点</strong>：<ul><li><strong>极高的效率</strong>：上下文切换在<strong>用户态</strong>完成，开销极小，可轻松创建数十万协程。</li><li><strong>无需复杂的锁机制</strong>：由于是单线程内协作，不存在多线程写变量冲突，简化了并发编程。</li><li><strong>简化异步代码</strong>：<code>async/await</code>语法让异步代码的编写和阅读更接近同步代码，逻辑更清晰。</li></ul></li><li><strong>缺点与注意事项</strong>：<ul><li><strong>无法利用多核CPU</strong>：协程是单线程的，计算密集型任务仍需依赖多进程或其他方案来并行。</li><li><strong>阻塞操作是“杀手”</strong>：协程中若存在<strong>阻塞式IO</strong>或<strong>长时间计算</strong>（未使用<code>await</code>或放到其他线程），会阻塞整个事件循环和所有其他协程。</li><li><strong>需要异步生态支持</strong>：要发挥协程优势，需要配套的异步库（如<code>aiohttp</code> 替代 <code>requests</code>）。</li></ul></li></ul><p>🚀 <strong>协程的适用场景</strong></p><p>协程尤其擅长处理<strong>IO密集型</strong>的高并发任务，例如： -<strong>网络爬虫</strong>：同时处理大量网页请求和响应。 -<strong>Web服务器</strong>（如 FastAPI,Sanic）：单线程处理数万并发连接。 -<strong>微服务网关</strong>：处理大量上下游API调用和聚合。 -<strong>实时通信</strong>：WebSocket服务器，维护大量长连接。</p><p>💡 <strong>总结一下</strong></p><p>协程的核心价值在于，它通过<strong>协作式调度</strong>和<strong>用户态切换</strong>，在保持代码可读性的同时，极大地提升了IO密集型应用的并发能力和资源利用率。它是现代高并发编程中一项非常重要的技术。</p><p>希望这些信息能帮助你理解协程。如果你还有其他问题，欢迎提出。</p><hr /><h1id="装饰器怎么写写一个计算函数运行次数的装饰器">装饰器怎么写，写一个计算函数运行次数的装饰器</h1><p>装饰器是 Python中一个非常实用的特性，它允许你在不修改原函数代码的情况下，为函数添加额外功能。下面我将为你介绍如何编写装饰器，并提供一个用于计算函数运行次数的装饰器示例。</p><h1 id="python-装饰器计算函数运行次数">🧩 Python装饰器：计算函数运行次数</h1><h2 id="装饰器简介">✨ 装饰器简介</h2><p>装饰器（Decorator）是 Python中的一种<strong>高级语法</strong>，它允许您在不修改原函数代码的情况下，动态地扩展函数或类的功能。装饰器本质上是一个可调用对象（通常是函数或类），它接受一个函数作为参数，并返回一个新的函数。</p><p><strong>装饰器的核心价值</strong>在于遵循<strong>开放封闭原则</strong>：对扩展开放，对修改封闭。这意味着您可以在不改变原函数代码的情况下，为函数添加新功能。</p><h2 id="装饰器类型对比">📊 装饰器类型对比</h2><p>在深入代码之前，我们先通过一个表格了解几种实现”统计函数执行次数”的方式及其特点：</p><table><thead><tr><th style="text-align: left;">实现方式</th><th style="text-align: left;">优点</th><th style="text-align: left;">缺点</th><th style="text-align: left;">适用场景</th></tr></thead><tbody><tr><td style="text-align: left;"><strong>装饰器（函数属性）</strong></td><tdstyle="text-align: left;">优雅简洁，无需修改原函数，多次调用计数持续</td><td style="text-align: left;">理解闭包概念有一定门槛</td><td style="text-align: left;">通用场景，尤其是需要长期统计的情况</td></tr><tr><td style="text-align: left;"><strong>装饰器（闭包变量）</strong></td><td style="text-align: left;">同样简洁，使用 <code>nonlocal</code>关键字</td><td style="text-align: left;">计数无法在函数外部直接持久化</td><td style="text-align: left;">单次运行期间的统计</td></tr><tr><td style="text-align: left;"><strong>全局变量</strong></td><td style="text-align: left;">实现简单直观</td><tdstyle="text-align: left;">破坏代码封装性，可能带来全局状态的不一致性</td><td style="text-align: left;">简单脚本或快速原型</td></tr><tr><td style="text-align: left;"><strong>类与类属性</strong></td><td style="text-align: left;">面向对象，易于扩展其他功能</td><td style="text-align: left;">稍显繁琐</td><td style="text-align: left;">需要关联更多状态或行为的复杂场景</td></tr></tbody></table><p>对于大多数需要<strong>统计函数调用次数</strong>的场景，使用<strong>装饰器</strong>是最为优雅和可维护的方式。接下来的示例将采用装饰器（函数属性）的方式。</p><h2 id="基本装饰器结构">📝 基本装饰器结构</h2><p>一个最简单的装饰器通常包含以下结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_decorator</span>(<span class="hljs-params">func</span>):          <span class="hljs-comment"># 1. 装饰器函数，接受一个函数作为参数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>): <span class="hljs-comment"># 2. 内部包装函数，用于增强原函数</span><br>        <span class="hljs-comment"># 在调用原函数前可以执行一些代码</span><br>        result = func(*args, **kwargs)  <span class="hljs-comment"># 调用原函数</span><br>        <span class="hljs-comment"># 在调用原函数后可以执行一些代码</span><br>        <span class="hljs-keyword">return</span> result             <span class="hljs-comment"># 返回原函数的执行结果</span><br>    <span class="hljs-keyword">return</span> wrapper               <span class="hljs-comment"># 3. 返回包装函数</span><br><br><span class="hljs-meta">@my_decorator                   </span><span class="hljs-comment"># 使用装饰器</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_function</span>():<br>    <span class="hljs-comment"># 函数体</span><br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>当使用 <code>@my_decorator</code> 语法糖时，相当于执行了<code>my_function = my_decorator(my_function)</code>。</p><h2 id="计算函数运行次数的装饰器">🔢 计算函数运行次数的装饰器</h2><p>下面是一个用于统计函数执行次数的装饰器实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> functools<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_calls</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    统计函数被调用次数的装饰器</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><span class="hljs-meta">    @functools.wraps(<span class="hljs-params">func</span>)  </span><span class="hljs-comment"># 使用wraps保留原函数的元信息</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper_count_calls</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        wrapper_count_calls.num_calls += <span class="hljs-number">1</span>  <span class="hljs-comment"># 计数器加1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;调用 <span class="hljs-subst">&#123;func.__name__!r&#125;</span> 第 <span class="hljs-subst">&#123;wrapper_count_calls.num_calls&#125;</span> 次&quot;</span>)<br>        <span class="hljs-keyword">return</span> func(*args, **kwargs)<br>    <br>    wrapper_count_calls.num_calls = <span class="hljs-number">0</span>  <span class="hljs-comment"># 初始化计数器</span><br>    <span class="hljs-keyword">return</span> wrapper_count_calls<br><br><span class="hljs-comment"># 使用装饰器</span><br><span class="hljs-meta">@count_calls</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Hello, <span class="hljs-subst">&#123;name&#125;</span>!&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;已向 <span class="hljs-subst">&#123;name&#125;</span> 打招呼&quot;</span><br><br><span class="hljs-comment"># 测试装饰器效果</span><br>say_hello(<span class="hljs-string">&quot;Alice&quot;</span>)<br>say_hello(<span class="hljs-string">&quot;Bob&quot;</span>)<br>say_hello(<span class="hljs-string">&quot;Charlie&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;say_hello 函数总共被调用了 <span class="hljs-subst">&#123;say_hello.num_calls&#125;</span> 次&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>输出结果：</strong> <figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">调用 <span class="hljs-string">&#x27;say_hello&#x27;</span> 第 <span class="hljs-number">1</span> 次<br>Hello, Alice!<br>调用 <span class="hljs-string">&#x27;say_hello&#x27;</span> 第 <span class="hljs-number">2</span> 次<br>Hello, Bob!<br>调用 <span class="hljs-string">&#x27;say_hello&#x27;</span> 第 <span class="hljs-number">3</span> 次<br>Hello, Charlie!<br>say_hello 函数总共被调用了 <span class="hljs-number">3</span> 次<br></code></pre></td></tr></table></figure></p><h2 id="关键技术点说明">🔧 关键技术点说明</h2><ol type="1"><li><p><strong>使用函数属性存储计数</strong>：<code>wrapper_count_calls.num_calls = 0</code>在包装函数上创建了一个属性来存储调用次数。这是一种在函数调用间保持状态的简便方法。</p></li><li><p><strong><code>functools.wraps</code>的作用</strong>：<code>@functools.wraps(func)</code>装饰器用于<strong>保留原函数的元数据</strong>（如名称、文档字符串等），这是编写装饰器时的最佳实践，有助于调试和保持代码清晰。</p></li><li><p><strong>通用参数传递</strong>：<code>(*args, **kwargs)</code>确保装饰器可以接受任意数量的位置参数和关键字参数，使其能够装饰任何函数。</p></li></ol><h2 id="高级用法带参数的装饰器">🚀 高级用法：带参数的装饰器</h2><p>如果您需要更灵活地控制装饰器行为，可以创建带参数的装饰器。这需要再多一层嵌套：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> functools<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">call_counter</span>(<span class="hljs-params">print_info=<span class="hljs-literal">True</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    带参数的装饰器工厂函数</span><br><span class="hljs-string">    :param print_info: 是否打印每次调用信息，默认为True</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator</span>(<span class="hljs-params">func</span>):<br><span class="hljs-meta">        @functools.wraps(<span class="hljs-params">func</span>)</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            wrapper.num_calls += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> print_info:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;调用 <span class="hljs-subst">&#123;func.__name__!r&#125;</span> 第 <span class="hljs-subst">&#123;wrapper.num_calls&#125;</span> 次&quot;</span>)<br>            <span class="hljs-keyword">return</span> func(*args, **kwargs)<br>        <br>        wrapper.num_calls = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> wrapper<br>    <span class="hljs-keyword">return</span> decorator<br><br><span class="hljs-comment"># 使用带参数的装饰器（打印调用信息）</span><br><span class="hljs-meta">@call_counter(<span class="hljs-params">print_info=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">function_one</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;function_one 执行了&quot;</span>)<br><br><span class="hljs-comment"># 使用带参数的装饰器（不打印调用信息）</span><br><span class="hljs-meta">@call_counter(<span class="hljs-params">print_info=<span class="hljs-literal">False</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">function_two</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;function_two 执行了&quot;</span>)<br><br><span class="hljs-comment"># 测试</span><br>function_one()<br>function_two()<br>function_one()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;function_one 被调用了 <span class="hljs-subst">&#123;function_one.num_calls&#125;</span> 次&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;function_two 被调用了 <span class="hljs-subst">&#123;function_two.num_calls&#125;</span> 次&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="总结-1">💡 总结</h2><p>编写装饰器，尤其是统计函数调用次数的装饰器，主要需注意以下几点： *<strong>核心结构</strong>：装饰器是一个返回函数的高阶函数。 *<strong>状态保持</strong>：通常使用函数属性（如<code>func.num_calls</code>）来在多次调用间保持状态。 *<strong>保留元信息</strong>：使用 <code>@functools.wraps</code>保留原函数的名称、文档字符串等元数据。 * <strong>通用性</strong>：使用<code>(*args, **kwargs)</code> 保证装饰器适用于任何函数。</p><p>希望以上示例和解释能帮助你理解和编写装饰器。装饰器非常强大，除了计数，还常用于日志记录、性能测试、缓存、权限校验等场景。</p><hr /><h1 id="多进程多线程的相关知识">多进程多线程的相关知识</h1><p>多进程和多线程是并发编程中两种核心模型，理解它们的区别和适用场景对编写高效程序很重要。下面我用一个表格汇总它们的核心特性，然后详细解释其原理和适用场景。</p><table><thead><tr><th style="text-align: left;">特性维度</th><th style="text-align: left;">多进程 (Multiprocessing)</th><th style="text-align: left;">多线程 (Multithreading)</th></tr></thead><tbody><tr><td style="text-align: left;"><strong>资源分配单位</strong></td><tdstyle="text-align: left;"><strong>操作系统资源分配的基本单位</strong></td><tdstyle="text-align: left;"><strong>CPU调度和执行的最小单位</strong></td></tr><tr><td style="text-align: left;"><strong>数据与内存</strong></td><tdstyle="text-align: left;"><strong>内存独立</strong>，每个进程有自己独立的地址空间和数据，互不干扰</td><tdstyle="text-align: left;"><strong>共享进程资源</strong>，所有线程共享同一进程的内存和资源</td></tr><tr><td style="text-align: left;"><strong>创建与开销</strong></td><tdstyle="text-align: left;">创建、销毁和切换<strong>开销大</strong>，占用资源多</td><tdstyle="text-align: left;">创建、销毁和切换<strong>开销小</strong>，更轻量级</td></tr><tr><td style="text-align: left;"><strong>稳定性与安全</strong></td><tdstyle="text-align: left;"><strong>更稳定安全</strong>，一个进程崩溃不会影响其他进程</td><tdstyle="text-align: left;"><strong>稳定性较低</strong>，一个线程崩溃可能导致整个进程崩溃</td></tr><tr><td style="text-align: left;"><strong>通信与同步</strong></td><tdstyle="text-align: left;">进程间通信(<strong>IPC</strong>)复杂，需用队列、管道、共享内存等</td><tdstyle="text-align: left;">线程间通信简单，可直接读写共享数据，但需注意<strong>同步问题</strong>（如锁）</td></tr><tr><td style="text-align: left;"><strong>并行性</strong></td><tdstyle="text-align: left;">可实现<strong>真正并行</strong>，尤其利于利用多核CPU</td><td style="text-align: left;">受<strong>全局解释器锁（GIL）</strong>等因素限制，常为<strong>并发</strong>（如CPython）</td></tr><tr><td style="text-align: left;"><strong>适用场景</strong></td><tdstyle="text-align: left;"><strong>CPU密集型</strong>任务（如计算、图像处理）、需稳定隔离的环境</td><tdstyle="text-align: left;"><strong>I/O密集型</strong>任务（如网络请求、文件读写）、需要快速响应的场景</td></tr></tbody></table><p>🧠 <strong>核心概念详解</strong></p><ol type="1"><li><strong>进程（Process）</strong>：进程是程序的一次执行过程，是系统进行<strong>资源分配和调度的一个独立单位</strong>。每个进程都有独立的地址空间、数据栈以及其他用于跟踪执行的辅助数据。操作系统管理所有进程，并为它们分配资源（如CPU时间、内存）。</li><li><strong>线程（Thread）</strong>：线程是<strong>进程中的一个执行流</strong>，是<strong>CPU调度和执行的最小单位</strong>。同一进程下的多个线程<strong>共享进程的地址空间和资源</strong>（如代码段、数据段、打开的文件等），但每个线程拥有自己的栈和局部变量。</li></ol><p>⚖️ <strong>如何选择：多进程 vs. 多线程</strong></p><p>选择多进程还是多线程，主要取决于你的任务类型和需求：</p><ul><li><strong>选择多进程当</strong>：<ul><li>任务是<strong>CPU密集型</strong>的，需要进行大量计算（如科学计算、图像处理、机器学习模型训练），并且你希望充分利用多核CPU的并行能力。</li><li>需要<strong>更高的稳定性和隔离性</strong>，避免单个任务失败导致整个应用崩溃。</li></ul></li><li><strong>选择多线程当</strong>：<ul><li>任务是<strong>I/O密集型</strong>的，涉及大量等待时间（如网络请求、磁盘读写、数据库操作）。线程在等待I/O时可以让出CPU，从而高效处理多个任务。</li><li><strong>需要共享大量数据</strong>，且线程间的通信和协调较为频繁和直接。</li><li>任务需要<strong>快速启动和较低的内存开销</strong> 。</li></ul></li></ul><p>🔧 <strong>Python中的实现与注意点（GIL）</strong></p><p>在Python中，实现多进程常用 <code>multiprocessing</code>模块，实现多线程则常用 <code>threading</code> 模块 。</p><p>Python的多线程有一个著名的特性——<strong>全局解释器锁（GIL）</strong>。GIL使得同一时刻只有一个线程可以执行Python字节码。因此，在<strong>CPU密集型任务</strong>中，Python的多线程无法利用多核CPU的优势，性能甚至可能不如单线程。但对于<strong>I/O密集型任务</strong>，由于线程在等待I/O时会释放GIL，GIL的影响较小，多线程依然能有效提升性能。</p><p>若要克服GIL限制，在Python中执行CPU密集型任务，<strong>使用多进程是更有效的方式</strong>，因为每个进程有自己独立的Python解释器和内存空间，因此也有自己独立的GIL。</p><p>💡 <strong>进程/线程间通信与同步</strong></p><ul><li><strong>多进程通信（IPC）</strong>：由于进程间内存独立，需要特殊的进程间通信（IPC）机制，如<code>multiprocessing.Queue</code>, <code>Pipe</code>, 或由<code>Manager</code> 管理的共享数据结构 。</li><li><strong>多线程同步</strong>：因为线程共享内存，所以当多个线程需要修改同一份数据时，必须考虑<strong>线程安全</strong>问题，避免竞争条件。常用的同步机制包括<strong>锁（Lock）</strong>、<strong>信号量（Semaphore）</strong>、<strong>条件变量（Condition）</strong>等 。</li></ul><p>🚀 <strong>高级模式</strong></p><ul><li><strong>进程池（Pool）</strong>：对于需要创建大量进程的任务，使用<code>multiprocessing.Pool</code>可以预先创建并管理一组进程，避免频繁创建和销毁进程的开销，适合处理大量小任务。</li><li><strong>生产者-消费者模型</strong>：多进程和多线程都常用此模式，通过队列（<code>Queue</code>）协调生产数据和处理数据的单元。</li></ul><p>希望这些信息能帮助你更好地理解多进程和多线程。如果你有具体的使用场景或编程语言方面的疑问，我很乐意提供更进一步的建议。</p>]]></content>
    
    
    <categories>
      
      <category>面试准备</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Interview Question</tag>
      
      <tag>408</tag>
      
      <tag>八股</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UCB CS188:Pacman Agent(1)</title>
    <link href="/2025/09/21/UCB-CS188-Pacman-Agent-1/"/>
    <url>/2025/09/21/UCB-CS188-Pacman-Agent-1/</url>
    
    <content type="html"><![CDATA[<h1id="探索基础搜索算法dfsbfs与ucs">探索基础搜索算法：DFS、BFS与UCS</h1><p>在人工智能和计算机科学领域，搜索算法是解决许多问题的核心工具。本文将深入探讨三种经典搜索算法：深度优先搜索（DFS）、广度优先搜索（BFS）和均匀成本搜索（UCS），并结合具体的Python代码实现来分析它们的工作原理和适用场景。</p><h2 id="算法原理概述">1 算法原理概述</h2><h3 id="深度优先搜索dfs">1.1 深度优先搜索（DFS）</h3><p>深度优先搜索采用<strong>后进先出（LIFO）</strong>的策略，优先探索分支的最深处。它使用<strong>栈（Stack）</strong>结构来存储待探索的节点，适合寻找任意解或拓扑排序。</p><h3 id="广度优先搜索bfs">1.2 广度优先搜索（BFS）</h3><p>广度优先搜索采用<strong>先进先出（FIFO）</strong>的策略，按层次逐步扩展搜索。它使用<strong>队列（Queue）</strong>结构来存储待探索的节点，能确保找到最短路径（在无权图中）。</p><h3 id="均匀成本搜索ucs">1.3 均匀成本搜索（UCS）</h3><p>均匀成本搜索是BFS的推广，用于<strong>加权图</strong>。它优先扩展当前路径成本最低的节点，使用<strong>优先队列（PriorityQueue）</strong> 结构，确保找到成本最低的路径。</p><h2 id="代码实现分析">2 代码实现分析</h2><p>以下代码实现了上述三种搜索算法，均采用图搜索方式（避免重复访问节点）。</p><h3 id="深度优先搜索dfs实现">2.1 深度优先搜索（DFS）实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">depthFirstSearch</span>(<span class="hljs-params">problem: SearchProblem</span>) -&gt; <span class="hljs-type">List</span>[Directions]:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Search the deepest nodes in the search tree first.</span><br><span class="hljs-string">    Your search algorithm needs to return a list of actions that reaches the goal. </span><br><span class="hljs-string">    Make sure to implement a graph search algorithm.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    frontier = util.Stack()  <span class="hljs-comment"># 使用栈实现DFS</span><br>    searched = <span class="hljs-built_in">set</span>()         <span class="hljs-comment"># 记录已访问节点，避免重复</span><br>    <span class="hljs-comment"># 初始状态：起点、空动作序列、初始成本0</span><br>    frontier.push((problem.getStartState(), [], <span class="hljs-number">0</span>))<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> frontier.isEmpty():<br>        state, actions, cost = frontier.pop()<br>        <br>        <span class="hljs-keyword">if</span> problem.isGoalState(state):  <span class="hljs-comment"># 目标测试</span><br>            <span class="hljs-keyword">return</span> actions<br>            <br>        <span class="hljs-keyword">if</span> state <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> searched:        <span class="hljs-comment"># 仅处理未访问节点</span><br>            searched.add(state)<br>            successors = problem.getSuccessors(state)<br>            <span class="hljs-keyword">for</span> next_state, action, step_cost <span class="hljs-keyword">in</span> successors:<br>                <span class="hljs-keyword">if</span> next_state <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> searched:  <span class="hljs-comment"># 图搜索：忽略已访问节点</span><br>                    <span class="hljs-comment"># 新动作序列 = 当前动作序列 + 新动作</span><br>                    new_actions = actions + [action]<br>                    new_cost = cost + step_cost<br>                    frontier.push((next_state, new_actions, new_cost))<br>                    <br>    <span class="hljs-keyword">return</span> []  <span class="hljs-comment"># 未找到路径时返回空列表</span><br></code></pre></td></tr></table></figure><p><strong>关键点</strong>： -<strong>数据结构</strong>：使用<code>util.Stack()</code>（栈），后进先出（LIFO）。-<strong>状态记录</strong>：<code>searched</code>集合记录已扩展节点，避免重复访问和循环（图搜索）。-<strong>路径记录</strong>：在节点中存储<code>actions</code>列表，记录从起点到当前节点的动作序列。-<strong>扩展规则</strong>：对于每个节点的后继节点，若未访问，则计算新路径的成本和动作序列，并压入栈中。</p><h3 id="广度优先搜索bfs实现">2.2 广度优先搜索（BFS）实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">breadthFirstSearch</span>(<span class="hljs-params">problem: SearchProblem</span>) -&gt; <span class="hljs-type">List</span>[Directions]:<br>    <span class="hljs-string">&quot;&quot;&quot;Search the shallowest nodes in the search tree first.&quot;&quot;&quot;</span><br>    frontier = util.Queue()  <span class="hljs-comment"># 使用队列实现BFS</span><br>    searched = <span class="hljs-built_in">set</span>()<br>    frontier.push((problem.getStartState(), [], <span class="hljs-number">0</span>))<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> frontier.isEmpty():<br>        state, actions, cost = frontier.pop()<br>        <br>        <span class="hljs-keyword">if</span> problem.isGoalState(state):<br>            <span class="hljs-keyword">return</span> actions<br>            <br>        <span class="hljs-keyword">if</span> state <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> searched:<br>            searched.add(state)<br>            successors = problem.getSuccessors(state)<br>            <span class="hljs-keyword">for</span> next_state, action, step_cost <span class="hljs-keyword">in</span> successors:<br>                <span class="hljs-keyword">if</span> next_state <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> searched:<br>                    new_actions = actions + [action]<br>                    new_cost = cost + step_cost<br>                    frontier.push((next_state, new_actions, new_cost))<br>                    <br>    <span class="hljs-keyword">return</span> []<br></code></pre></td></tr></table></figure><p><strong>关键点</strong>： -<strong>数据结构</strong>：使用<code>util.Queue()</code>（队列），先进先出（FIFO）。-<strong>完备性与最优性</strong>：在无权图中，BFS是完备的，且总能找到最短路径（最少步数）。- <strong>扩展顺序</strong>：先扩展深度最浅的节点，确保按层次遍历。</p><h3 id="均匀成本搜索ucs实现">2.3 均匀成本搜索（UCS）实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">uniformCostSearch</span>(<span class="hljs-params">problem: SearchProblem</span>) -&gt; <span class="hljs-type">List</span>[Directions]:<br>    <span class="hljs-string">&quot;&quot;&quot;Search the node of least total cost first.&quot;&quot;&quot;</span><br>    frontier = util.PriorityQueue()  <span class="hljs-comment"># 使用优先队列实现UCS</span><br>    searched = <span class="hljs-built_in">set</span>()<br>    <span class="hljs-comment"># 初始状态按成本0优先级入队</span><br>    frontier.push((problem.getStartState(), [], <span class="hljs-number">0</span>), <span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> frontier.isEmpty():<br>        state, actions, cost = frontier.pop()<br>        <br>        <span class="hljs-keyword">if</span> problem.isGoalState(state):<br>            <span class="hljs-keyword">return</span> actions<br>            <br>        <span class="hljs-keyword">if</span> state <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> searched:<br>            searched.add(state)<br>            successors = problem.getSuccessors(state)<br>            <span class="hljs-keyword">for</span> next_state, action, step_cost <span class="hljs-keyword">in</span> successors:<br>                <span class="hljs-keyword">if</span> next_state <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> searched:<br>                    new_actions = actions + [action]<br>                    new_cost = cost + step_cost  <span class="hljs-comment"># 累计成本</span><br>                    <span class="hljs-comment"># 以新成本作为优先级入队</span><br>                    frontier.push((next_state, new_actions, new_cost), new_cost)<br>                    <br>    <span class="hljs-keyword">return</span> []<br></code></pre></td></tr></table></figure><p><strong>关键点</strong>： -<strong>数据结构</strong>：使用<code>util.PriorityQueue()</code>（优先队列），按路径成本排序。-<strong>成本敏感</strong>：每次扩展累计成本<code>new_cost</code>最低的节点，确保找到成本最低的路径。-<strong>最优性</strong>：在有权图中，UCS是完备的，且总能找到成本最低的路径（当成本非负时）。</p><h2 id="三种算法的对比与应用">3 三种算法的对比与应用</h2><p>为了更直观地比较这三种算法，以下是它们在数据结构、扩展顺序、最优性等方面的差异：</p><table><thead><tr><th style="text-align: left;"><strong>特征</strong></th><th style="text-align: left;"><strong>深度优先搜索（DFS）</strong></th><th style="text-align: left;"><strong>广度优先搜索（BFS）</strong></th><th style="text-align: left;"><strong>均匀成本搜索（UCS）</strong></th></tr></thead><tbody><tr><td style="text-align: left;"><strong>数据结构</strong></td><td style="text-align: left;">栈（Stack）</td><td style="text-align: left;">队列（Queue）</td><td style="text-align: left;">优先队列（Priority Queue）</td></tr><tr><td style="text-align: left;"><strong>扩展顺序</strong></td><td style="text-align: left;">最深节点</td><td style="text-align: left;">最浅节点</td><td style="text-align: left;">最小成本节点</td></tr><tr><td style="text-align: left;"><strong>最优性</strong></td><td style="text-align: left;">否（可能找到非最短路径）</td><td style="text-align: left;">是（无权图最短路径）</td><td style="text-align: left;">是（加权图最低成本路径）</td></tr><tr><td style="text-align: left;"><strong>完备性</strong></td><td style="text-align: left;">是（有限图）</td><td style="text-align: left;">是（有限图）</td><td style="text-align: left;">是（有限图，成本≥0）</td></tr><tr><td style="text-align: left;"><strong>空间复杂度</strong></td><td style="text-align: left;">O(bm)</td><td style="text-align: left;">O(b^d)</td><td style="text-align: left;">O(b^d)</td></tr><tr><td style="text-align: left;"><strong>时间复杂度</strong></td><td style="text-align: left;">O(b^m)</td><td style="text-align: left;">O(b^d)</td><td style="text-align: left;">O(b^d)</td></tr></tbody></table><blockquote><p><strong>符号说明</strong>：b为分支因子，d为解所在深度，m为最大深度。</p></blockquote><h3 id="实际应用场景">3.1 实际应用场景</h3><ul><li><strong>DFS</strong>：适用于解空间较深、需快速找到一个可行解的场景，如迷宫求解、拓扑排序。</li><li><strong>BFS</strong>：适用于寻找最短路径（步数），如社交网络中的最短关系链、迷宫的最短出口路径。</li><li><strong>UCS</strong>：适用于考虑行动成本的场景，如地图导航中的最短行驶时间、资源消耗最小化。</li></ul><h2 id="总结">4 总结</h2><p>深度优先搜索、广度优先搜索和均匀成本搜索是图搜索中最基础的算法。它们通过不同的数据结构和控制策略，实现了各自优势的搜索策略。在实际应用中，根据问题需求（如是否需要最优解、解的空间特征、是否有权重等）选择合适的算法至关重要。理解这些算法的原理和实现，是构建更复杂人工智能系统（如A*搜索、蒙特卡洛树搜索等）的坚实基础。</p><blockquote><p><strong>提示</strong>：以上代码均基于图搜索（避免重复访问），若采用树搜索（允许重复访问），需移除<code>searched</code>集合的相关操作，但可能陷入循环。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Class</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Agent</tag>
      
      <tag>Search</tag>
      
      <tag>Algorithm</tag>
      
      <tag>CS188</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Blog Reading:LLM Powered Autonomous Agents -Lilian Weng</title>
    <link href="/2025/09/20/Blog-Reading-LLM-Powered-Autonomous-Agents-Lilian-Weng/"/>
    <url>/2025/09/20/Blog-Reading-LLM-Powered-Autonomous-Agents-Lilian-Weng/</url>
    
    <content type="html"><![CDATA[<p>该博文深入探讨了以<strong>大型语言模型（LLM）为核心控制器</strong>来构建<strong>自主智能代理（AutonomousAgents）</strong>的概念、架构、组件、案例研究及其面临的挑战。文章指出，LLM的潜力远不止于生成文本，更可被视为一个强大的通用问题解决器，作为代理的“大脑”。</p><h3 id="核心架构概述">核心架构概述</h3><p>一个LLM驱动的自主代理系统通常由三个关键组件协同工作：</p><ol type="1"><li><strong>规划（Planning）</strong>：代理的核心思维能力，用于分解任务和反思改进。</li><li><strong>记忆（Memory）</strong>：代理的存储系统，用于保留和召回信息。</li><li><strong>工具使用（ToolUse）</strong>：代理与外部世界交互的手段，扩展其内在能力。</li></ol><h3 id="组件一规划-planning">组件一：规划 (Planning)</h3><p>规划使代理能够处理复杂任务，主要包括两个方面：</p><p><strong>1. 任务分解 (Task Decomposition)</strong> *<strong>思维链（CoT）</strong>：标准技术，通过“一步一步思考”的提示，将复杂任务分解为更小、更简单的步骤。*<strong>思维树（ToT）</strong>：CoT的扩展，在每一步探索多种推理可能性，形成树状结构，并通过广度优先搜索（BFS）或深度优先搜索（DFS）进行搜索，由分类器（通过提示）或多数投票评估状态。*<strong>分解方法</strong>：可通过LLM简单提示、任务特定指令或人类输入完成。*<strong>LLM+P</strong>：一种独特方法，将长期规划外包给<strong>外部经典规划器</strong>。LLM负责将问题转换为规划域定义语言（PDDL），classicalplanner生成计划，LLM再将计划转换回自然语言。该方法依赖于现成的领域PDDL和规划器。</p><p><strong>2. 自我反思 (Self-Reflection)</strong>自我反思使代理能够从错误中学习，迭代改进其行动和策略。 *<strong>ReAct（Reason +Act）</strong>：将<strong>推理</strong>（生成自然语言思考轨迹）和<strong>行动</strong>（调用特定任务API）结合在一个框架内。其提示模板格式为：<code>Thought: ... Action: ... Observation: ...</code>。研究表明，ReAct在知识密集和决策任务上均优于仅行动的基线。*<strong>Reflexion</strong>：一个为代理配备动态记忆和自我反思能力的框架，其灵感来自强化学习（RL）设置。它引入了一种<strong>启发式函数</strong>来检测低效规划或幻觉（连续相同动作导致相同观察），并决定何时停止当前轨迹并重置环境。通过<strong>少样本示例</strong>让LLM生成自我反思，并将这些反思存入工作记忆中以指导未来规划。* **hindsight（CoH）<strong>：通过向模型展示一个</strong>带有反馈的过去输出序列<strong>（按奖励排序）进行监督微调，训练模型根据反馈历史趋势生成更好的输出。*</strong>算法蒸馏（AD）<strong>：将CoH思想应用于强化学习。它将</strong>跨episode的学习历史<strong>串联起来作为模型的输入，目的是让模型学会</strong>强化学习过程本身**，从而在上下文中表现出学习行为，其性能接近在线RL方法。</p><h3 id="组件二记忆-memory">组件二：记忆 (Memory)</h3><p>记忆使代理能够积累和利用过去的信息。 *<strong>记忆类型</strong>（类比人类记忆）： *<strong>感官记忆</strong>：类比于对原始输入（文本、图像等）学习嵌入表示。*<strong>短期记忆</strong>：类比于<strong>上下文学习</strong>。受Transformer上下文窗口长度限制，容量有限。* <strong>长期记忆</strong>：类比于<strong>外部向量存储</strong>（VectorStore），通过快速检索访问，提供近乎无限的存储容量。 *<strong>最大内积搜索（MIPS）</strong>：为了快速从向量库中检索信息，常使用<strong>近似最近邻（ANN）</strong>算法。文章介绍了几种常见算法： * <strong>LSH</strong>（局部敏感哈希） *<strong>ANNOY</strong>（基于随机投影树） *<strong>HNSW</strong>（分层可导航小世界图） *<strong>FAISS</strong>（基于向量量化） *<strong>ScaNN</strong>（各向异性向量量化）</p><h3 id="组件三工具使用-tool-use">组件三：工具使用 (Tool Use)</h3><p>工具使用极大地扩展了LLM的能力边界，使其能够获取实时信息、执行代码等。*<strong>MRKL</strong>：一种神经符号架构，LLM作为<strong>路由器</strong>，将问题路由到最适合的<strong>专家模块</strong>（可以是神经或符号工具，如计算器、API）。关键在于LLM能否可靠地决定<strong>何时</strong>及<strong>如何</strong>使用工具。* <strong>TALM &amp;Toolformer</strong>：通过微调LLM来学习调用外部工具API。数据集通过判断添加API调用是否能改进输出质量来构建。* <strong>实践案例</strong>：ChatGPT Plugins 和 OpenAI API functioncalling 是工具增强LLM的实际例子。 *<strong>HuggingGPT</strong>：一个框架，利用ChatGPT作为<strong>任务规划器</strong>，根据模型描述选择HuggingFace平台上的模型，并总结执行结果。其工作流程分为四个阶段：1. <strong>任务规划</strong>：LLM解析用户请求为多个任务。 2.<strong>模型选择</strong>：LLM将任务分配给专家模型。 3.<strong>任务执行</strong>：专家模型执行任务。 4.<strong>响应生成</strong>：LLM汇总结果返回给用户。 *<strong>API-Bank</strong>：一个用于评估工具增强LLM性能的基准测试，包含53个API工具和264个对话。它在三个层次上评估代理：* <strong>Level-1</strong>：调用给定API的能力。 *<strong>Level-2</strong>：检索正确API的能力。 *<strong>Level-3</strong>：超越检索和调用的规划能力（处理模糊用户请求，需多次API调用）。</p><h3 id="案例研究-case-studies">案例研究 (Case Studies)</h3><ol type="1"><li><strong>科学发现代理</strong>：<ul><li><strong>ChemCrow</strong>：一个用于化学领域（有机合成、药物发现等）的代理，集成了13个专家设计的工具。使用ReAct和MRKL模式。<strong>关键发现</strong>：人类专家评估发现ChemCrow远优于GPT-4，突显了LLM在专业领域自我评估的局限性。</li><li><strong>Boiko etal.</strong>：探索LLM代理自主设计、规划和执行复杂科学实验，使用互联网浏览、文档阅读、代码执行、机器人实验API等工具。同时讨论了其用于合成化学武器等风险。</li></ul></li><li><strong>生成式代理模拟</strong>：<ul><li><strong>GenerativeAgents</strong>：一个有趣的实验，25个由LLM驱动的虚拟角色在一个沙盒环境中生活互动（类似《模拟人生》）。代理架构结合了：<ul><li><strong>记忆流</strong>：记录代理经验的外部数据库。</li><li><strong>检索模型</strong>：根据<strong>相关性、新近性和重要性</strong>从记忆流中检索信息。</li><li><strong>反思机制</strong>：将记忆合成为更高层次的推断，指导未来行为。</li><li><strong>规划与反应</strong>：将反射和环境信息转化为行动。</li></ul></li><li>结果涌现出信息传播、关系记忆和社交事件协调等<strong>逼真的社会行为</strong>。</li></ul></li><li><strong>概念验证示例</strong>：<ul><li><strong>AutoGPT</strong>：一个著名的PoC演示，展示了自主代理的潜力。其系统提示定义了目标、约束、可用命令（如谷歌搜索、读写文件、执行代码等），并要求以特定JSON格式响应。大量代码用于解析自然语言输出。</li><li><strong>GPT-Engineer</strong>：根据自然语言任务描述生成整个代码库。其工作流程包括：首先要求LLM<strong>澄清任务细节</strong>，然后进入<strong>代码生成模式</strong>（使用详细的系统提示，要求生成完整、可运行、跨文件兼容的代码）。</li></ul></li></ol><h3 id="挑战-challenges">挑战 (Challenges)</h3><p>文章最后指出了构建LLM驱动代理面临的主要挑战： 1.<strong>有限的上下文长度</strong>：限制了历史信息、详细指令和API上下文的包含。虽然向量存储提供了扩展，但其表示能力不如全注意力机制。2.<strong>长期规划与任务分解的困难</strong>：LLM在根据意外错误调整计划方面存在困难，其稳健性不如人类。3.<strong>自然语言接口的可靠性</strong>：LLM的输出可能存在格式错误或偶尔拒绝指令，导致系统需要大量代码来解析输出，可靠性成为问题。</p><h3 id="总结">总结</h3><p>这篇博文全面综述了LLM驱动自主代理的技术蓝图，将其分解为规划、记忆和使用工具三大核心模块，并辅以丰富的技术细节（如ReAct、Reflexion、HNSW、HuggingGPT等）和生动案例（ChemCrow,Generative Agents,AutoGPT）。最后，它客观地指出了当前技术在实际应用中面临的上下文限制、规划可靠性和接口稳定性等关键挑战，为读者提供了对该领域深入且系统的理解。</p>]]></content>
    
    
    <categories>
      
      <category>Blog Reading</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Agent</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络笔记</title>
    <link href="/2025/09/07/computer_network/"/>
    <url>/2025/09/07/computer_network/</url>
    
    <content type="html"><![CDATA[<h1 id="test">test</h1><h2 id="test-test">test test</h2><h3 id="test-test-test">test test test</h3><h3 id="another-test">another test</h3><h4 id="test-test-test-test">test test test test</h4>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/09/07/hello-world/"/>
    <url>/2025/09/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
